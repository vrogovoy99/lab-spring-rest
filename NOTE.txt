To consume API use FEING CLIENT

1. Add dependency

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

2. add @EnableFeignClients in runner class

3. Create client package, WeatherClient.class

4. use https://www.jsonschema2pojo.org/ to map object and create WeatherResponse classes.

5. Dependency Inject WeatherClient in implementation class

6. put access key in application.property file
    access_key=dsadfasdfadfadf

    then in implementation class add

    @Value("${access_key}")
    private String accessKey;


7. add flag source (https://restcountries.com/v3.1/name/deutschland)

7.1. Create CountryClient interface

7.2. use https://www.jsonschema2pojo.org/ to map object and create classes in dto package

8. Exception catcher to catch and respond to custom class exceptions in exception/GlobalExceptionHandler
        @RestControllerAdvice
        @ExceptionHandler([exception class].class)
         in methods parameters include HttpServletRequest to get URL
        ExceptionWrapper.class  - example

9. validation exception response
9.1. Add SpringBoot validation dependancy in pom.xml

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

9.2. Add Spring Boot validation rules to DTO classes (example: com/cydeo/dto/TeacherDTO.java). Some of the key annotations

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public class TeacherDTO {
    @JsonIgnore
    private Long id;
    @NotBlank(message = "First Name is a required field")
    @Size(min = 2, max = 50, message = "First Name must be between 2 and 50 characters long")
    @Pattern(regexp = "^[a-zA-Z]+$", message = "First Name must contain only letters")

9.3. Put @Valid annotation in controller accepting validated object.

     @PostMapping
        public ResponseEntity<ResponseWrapper> createTeacher(@RequestBody @Valid TeacherDTO teacherDTO){

     The validation error will return MethodArgumentNotValidException.class

9.4. In GlobalExeption.class add method to catch MethodArgumentNotValidException.class

9.5. Create ValidationException class to capture MethodArgumentNotValidException.class errors

9.6. Add ValidationException list in ExceptionWrapper to display error message with MethodArgumentNotValidException.class outputs

9.7. in GlobalExceptionHandler add exception.printStackTrace(); in each method to display error in console / log.




